from scapy.all import *
import sys
import ipaddress
import socket

conf.verb = 0
ScanPorts = {
"20": {"name": "ftp-data","description": "FTP data port"},
"21": {"name": "ftp","description": "File Transfer Protocol (FTP) port, sometimes used by File Service Protocol (FSP)"},
"22": {"name": "ssh","description": "Secure Shell (SSH) service"},
"23": {"name": "telnet","description": "The Telnet service"},
"25": {"name": "smtp","description": "Simple Mail Transfer Protocol (SMTP)"},
"37": {"name": "time","description": "Time Protocol"},
"42": {"name": "nameserver","description": "Internet Name Service"},
"43": {"name": "nicname","description": "WHOIS directory service"},
"49": {"name": "tacacs","description": "Terminal Access Controller Access Control System for TCP/IP based authentication and access"},
"50": {"name": "re-mail-ck","description": "Remote Mail Checking Protocol"},
"53": {"name": "domain","description": "domain name services (such as BIND)"},
"79": {"name": "finger","description": "Finger service for user contact information"},
"80": {"name": "http","description": "HyperText Transfer Protocol (HTTP) for World Wide Web (WWW) services"},
"88": {"name": "kerberos","description": "Kerberos network authentication system"},
"95": {"name": "supdup","description": "Telnet protocol extension"},
"107": {"name": "rtelnet","description": "Remote Telnet"},
"109": {"name": "pop2","description": "Post Office Protocol version 2"},
"110": {"name": "pop3","description": "Post Office Protocol version 3"},
"123": {"name": "ntp","description": "Network Time Protocol (NTP)"},
"137": {"name": "netbios-ns","description": "NETBIOS Name Service used in Red Hat Enterprise Linux by Samba"},
"138": {"name": "netbios-dgm","description": "NETBIOS Datagram Service used in Red Hat Enterprise Linux by Samba"},
"139": {"name": "netbios-ssn","description": "NETBIOS Session Service used in Red Hat Enterprise Linux by Samba"},
"143": {"name": "imap","description": "Internet Message Access Protocol (IMAP)"},
"161": {"name": "snmp","description": "Simple Network Management Protocol (SNMP)"},
"162": {"name": "snmptrap","description": "Traps for SNMP"},
"179": {"name": "bgp","description": "Border Gateway Protocol"},
"220": {"name": "imap3","description": "Internet Message Access Protocol version 3"},
"389": {"name": "ldap","description": "Lightweight Directory Access Protocol (LDAP)"},
"443": {"name": "https","description": "Secure Hypertext Transfer Protocol (HTTP)"},
"444": {"name": "snpp","description": "Simple Network Paging Protocol"},
"445": {"name": "microsoft-ds","description": "Server Message Block (SMB) over TCP/IP"},
"464": {"name": "kpasswd","description": "Kerberos password and key changing services"},
"488": {"name": "gss-http","description": "Generic Security Services (GSS) for HTTP"},
"500": {"name": "isakmp","description": "Internet Security Association and Key Management Protocol (ISAKMP)"},
"535": {"name": "iiop","description": "Internet Inter-Orb Protocol (IIOP)"},
"538": {"name": "gdomap","description": "GNUstep Distributed Objects Mapper (GDOMAP)"},
"546": {"name": "dhcpv6-client","description": "Dynamic Host Configuration Protocol (DHCP) version 6 client"},
"547": {"name": "dhcpv6-server","description": "Dynamic Host Configuration Protocol (DHCP) version 6 Service"},
"636": {"name": "ldaps","description": "Lightweight Directory Access Protocol over Secure Sockets Layer (LDAPS)"},
"749": {"name": "kerberos-adm","description": "Kerberos version 5 (v5) 'kadmin' database administration"},
"750": {"name": "kerberos-iv","description": "Kerberos version 4 (v4) services"},
"765": {"name": "webster","description": "Network Dictionary"},
"767": {"name": "phonebook","description": "Network Phonebook"},
"873": {"name": "rsync","description": "rsync file transfer services"},
"992": {"name": "telnets","description": "Telnet over Secure Sockets Layer (TelnetS)"},
"3389": {"name": "rdp","description": "MS Remote Desktop"}
}

class PortFound:
    def __init__(self, port, banner, value):
        self.port = port
        self.banner = banner
        self.value = value


class ScanIP:
    def __init__(self, ip):
        self.ip = str(ip)
        self.ports = []

    def scan(self):

        for port, value in ScanPorts.items():

            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(1)

            try:
                s.connect((self.ip, int(port)))
            except:
                why = 1
            else:
                
                try:
                    banner = s.recv(124)
                except:
                    banner = "No banner found"
                
                portFound = PortFound(port, banner, value)
                self.ports.append(portFound)

scan_ips = []
input_ips = str(sys.argv[1])

for ip in ipaddress.IPv4Network(input_ips):
    scan_ip = ScanIP(ip)
    scan_ips.append(scan_ip)

print("Starting port_scanner.py with " + str(len(scan_ips)) + " IPs.\nThis could take a while...")


for scan_ip in scan_ips:
    scan_ip.scan()

    if len(scan_ip.ports) > 0:
        print("\n\n")
        print(scan_ip.ip)
        for port in scan_ip.ports:
            print("  ", port.port)
            print("    Banner: ", port.banner)
            print("    Service:", dict(port.value).get("name"))
            
            

            

